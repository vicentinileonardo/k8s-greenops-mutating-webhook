# Grant OPA/kube-mgmt read-only access to resources. This lets kube-mgmt
# replicate resources into OPA so they can be used in policies.
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: opa-viewer
roleRef:
  kind: ClusterRole
  name: view
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: Group
  name: system:serviceaccounts:opa
  apiGroup: rbac.authorization.k8s.io
---
# Define role for OPA/kube-mgmt to update configmaps with policy status.
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: opa
  name: configmap-modifier
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["update", "patch"]
---
# Grant OPA/kube-mgmt role defined above.
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: opa
  name: opa-configmap-modifier
roleRef:
  kind: Role
  name: configmap-modifier
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: Group
  name: system:serviceaccounts:opa
  apiGroup: rbac.authorization.k8s.io
---
kind: Service
apiVersion: v1
metadata:
  name: opa
  namespace: opa
spec:
  selector:
    app: opa
  ports:
  - name: https
    protocol: TCP
    port: 443
    targetPort: 8443
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: opa
  namespace: opa
  name: opa
spec:
  replicas: 1
  selector:
    matchLabels:
      app: opa
  template:
    metadata:
      labels:
        app: opa
      name: opa
    spec:
      containers:
        # WARNING: OPA is NOT running with an authorization policy configured. This
        # means that clients can read and write policies in OPA. If you are
        # deploying OPA in an insecure environment, be sure to configure
        # authentication and authorization on the daemon. See the Security page for
        # details: https://www.openpolicyagent.org/docs/security.html.
        - name: opa
          image: openpolicyagent/opa:0.70.0
          args:
            - "run"
            - "--server"
            - "--tls-cert-file=/certs/tls.crt"
            - "--tls-private-key-file=/certs/tls.key"
            - "--addr=0.0.0.0:8443"
            - "--addr=http://127.0.0.1:8181"
            - "--config-file=/config/opa-config.yaml"
            # set token for OCI registry, if needed
            # - "--set=services.dockerhub-registry.credentials.bearer.scheme=Bearer"
            # - "--set=services.dockerhub-registry.credentials.bearer.token=/path/to/token"
            - "--log-level=debug"
            - "--log-format=json-pretty"
            - "--set=status.console=true"
            - "--set=decision_logs.console=true"
          resources:
            limits:
              memory: "256Mi"
              cpu: "500m"
            requests:
              memory: "128Mi"
              cpu: "250m"
          volumeMounts:
            - readOnly: true
              mountPath: /certs
              name: opa-server
            - readOnly: true
              mountPath: /config
              name: opa-config
          envFrom:
            - configMapRef:
                name: opa-env-config
          readinessProbe:
            httpGet:
              path: /health?plugins&bundle
              scheme: HTTPS
              port: 8443
            initialDelaySeconds: 3
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              scheme: HTTPS
              port: 8443
            initialDelaySeconds: 3
            periodSeconds: 5
        - name: kube-mgmt
          image: openpolicyagent/kube-mgmt:2.0.1
          args:
          #  - "--replicate-cluster=v1/namespaces"
            - "--replicate=composition.krateo.io/v1-2-0/vmtemplates.composition.krateo.io"
          resources:
            limits:
              memory: "128Mi"
              cpu: "250m"
            requests:
              memory: "64Mi"
              cpu: "125m"
      volumes:
        - name: opa-server
          secret:
            secretName: opa-server
        - name: opa-config
          configMap:
            name: opa-config
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: opa-config
  namespace: opa
data:
  opa-config.yaml: |
    services:
      dockerhub-registry:
        url: https://registry.hub.docker.com
        type: oci
    bundles:
      authz:
        service: dockerhub-registry
        resource: docker.io/leovice/test-opa-bundle-scheduling:latest
        persist: false
        polling:
          min_delay_seconds: 60
          max_delay_seconds: 120
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opa-env-config
  namespace: opa
data:
  AI_INFERENCE_SERVER_MOCK_URL: "http://ai-inference-server-mock.ai-inference-server-mock.svc.cluster.local:8080/scheduling"
